[
    {
        "title": "MyProgram.S",
        "optionName": "New Program",
        "isNewProgram": true,
        "text": "# static data declarations begin at .data\n.data\n\n# program text begins at .text\n.text \n\n# define global function main\n.globl main\n\n# program begins execution at main\nmain:\n    \n    jr  $ra\t\t\t# Exit",
        "cycles" : 150
    },
    {
        "title": "HelloWorld.S",
        "optionName": "Hello World",
        "text": "# static data declarations begin at .data\n\t.data\n    msg:\t.asciiz\t\t\"Hello World!\\n\"\n\n# program text begins at .text\n.text \n\n# define global function main\n.globl main\n\n# program begins execution at main\nmain:\n    la  $a0, msg\t# $a0 = address of message\n    li\t$v0, 4\t\t# $v0 = 4: print string code\n\tsyscall\t\t\t# print msg\n    jr  $ra\t\t\t# Exit",
        "cycles": 100
    },
    {
        "title": "Showcase.S",
        "optionName": "Showcase",
        "text": "# data declarations begin at .data\n.data\n\thello:\t.asciiz \"Hello, World!\\n\"\n\n\toptions_msg:\t.asciiz \"\\n\\nPlease Enter a number to select an option:\\n 1. How am I seeing this text?\\n 2. Tell me a joke\\n 3. Why so slow?\\n 4. Exit\\n\"\n\n\texplanation_msg: .asciiz \"1's and 0's have been compiled from the MIPS assembly language, and they are being run through a LOT of simulated logic gates and hardware components to mimic the actual datapath of MIPS architecture.\"\n\n\twhy_so_slow_msg: .asciiz \"A standard MIPS computer has a clock cycle of about 200ps. This computer completes the operations done in a clock cycle in 5.2ms - 26,000 times slower. Clearly, the goal of this computer wasn't performance, it was to make something neat.\"\n\n\tjoke_msg: .asciiz \"Why was the computer late?\\n\\nIt had a hard drive.\"\n\n\tgoodbye: .asciiz \"Goodbye!\\n\"\n\t\n# program text begins at .text\n.text \n# declare global function main\n.globl main\n\n# program execution starts at main\nmain:\n    li\t$v0, 4  # $v0 = 4 - print string syscall\n\n    # Hello! :)\n    la  $a0, hello  # $a0 = addr of hello (for print string syscall)\n    syscall         # print hello\n    \n    j options   # jump to options\n\n# List option menu for user\n# expects $v0 to already equal 4 (for print string)\noptions:\n    la $a0, options_msg  # $a0 = addr of options_msg - for print string syscall\n    syscall     # print options_msg\n\tli\t$v0, 5  # $v0 = 5 - for read int syscall\n    syscall     # read int\n\n    move $t0, $v0   # $t0 = user input int\n    li $v0, 4       # $v0 = 4 (for next print string)\n\n\tli  $t1, 1  # $t1 = 1 (for comparison)\n    beq\t$t0, $t1, explanation   # branch to explanation if user input = 1\n    li  $t1, 2  # $t1 = 2 (for comparison)\n    beq\t$t0, $t1, joke          # branch to joke if user input = 2\n    li  $t1, 3  # $t1 = 3 (for comparison)\n    beq\t$t0, $t1, whysoslow     # branch to whysoslow if user input = 3\n    li  $t1, 4  # $t1 = 4 (for comparison) \n    beq\t$t0, $t1, Exit          # exit if user input = 4\n    j\toptions   # repeat options if user input invalid option\n\n# give simple explanation for what computer does\n# expects $v0 to already equal 4 (for print string)\nexplanation:\n    la $a0, explanation_msg     # $a0 = addr of explanation_msg - for print string syscall\n    syscall     # print explanation_msg\n    j  options  # display options again\n\n# tell hilarious joke\n# expects $v0 to already equal 4 (for print string)\njoke:\n    la  $a0, joke_msg    # $a0 = addr of joke_msg - for print string syscall\n    syscall     # print explanation_msg\n    j   options # display options again\n\n# explains why computer is so slow (I really just wanted another option)\n# expects $v0 to already equal 4 (for print string)\nwhysoslow:\n    la $a0, why_so_slow_msg     # $a0 = addr of why_so_slow_msg - for print string syscall\n    syscall     # print why_so_slow_msg\n    j  options  # display options again\n\n# exit program\n# expects $ra to be preserved\nExit:\n    li $a0, 4       # $v0 = 4 (for print string)\n    la $a0, goodbye # $a0 = addr of goodbye\n    syscall     # print goodbye\n    jr  $ra     # exit",
        "cycles" : 900
    },
    {
        "title": "SayHi.S",
        "text": "# static data declarations begin at .data\n\t.data\n    prompt:\t.asciiz\t\t\"Please Enter Your Name: \"\n\tmsg:\t.asciiz\t\t\"Hello, \"\n\n# program text begins at .text\n.text \n\n# define global function main\n.globl main\n\n# program begins execution at main\nmain:\n    la  $a0, prompt # $a0 = address of message\n    li\t$v0, 4\t\t# $v0 = 4: print string code\n\tnop\t\t\t\t# buffer\n\tnop\t\t\t\t# buffer\n\tsyscall\t\t\t# print msg\n\tli\t$v0, 8\t\t# $v0 = 8: read string code\n\tnop\t\t\t\t# buffer\n\tnop\t\t\t\t# buffer\n\tsyscall\t\t\t# print msg\n\tnop\t\t\t\t# buffer\n\taddi $sp, $sp, -4\t# push stack pointer\n\tsw\t$a0, 0($sp)\t\t# push $a0 to stack\n    la  $a0, msg\t# $a0 = address of message\n\tli\t$v0, 4\t\t# $v0 = 4: print string code\n\tnop\t\t\t\t# buffer\n\tnop\t\t\t\t# buffer\n\tsyscall\t\t\t# print msg\n\tlw\t$a0, 0($sp)\t\t# retreive $a0 from stack\n\taddi $sp, $sp, 4\t# pop stack pointer\n\tnop\t\t\t\t# buffer\n\tnop\t\t\t\t# buffer\n\tsyscall\t\t\t# print msg\n    jr  $ra\t\t\t# Exit",
        "cycles" : 150
    }
]